[{"/home/lumar26/todo-app/src/index.js":"1","/home/lumar26/todo-app/src/App.js":"2","/home/lumar26/todo-app/src/Components/List.jsx":"3","/home/lumar26/todo-app/src/Components/Form.jsx":"4","/home/lumar26/todo-app/src/hooks/UseLocalStorage.jsx":"5","/home/lumar26/todo-app/src/Components/Item.jsx":"6"},{"size":203,"mtime":1612278575304,"results":"7","hashOfConfig":"8"},{"size":1078,"mtime":1612278575304,"results":"9","hashOfConfig":"8"},{"size":488,"mtime":1612278575304,"results":"10","hashOfConfig":"8"},{"size":2659,"mtime":1612278575304,"results":"11","hashOfConfig":"8"},{"size":1399,"mtime":1612278575304,"results":"12","hashOfConfig":"8"},{"size":1286,"mtime":1612278575304,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"g927rt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/home/lumar26/todo-app/src/index.js",[],["30","31"],"/home/lumar26/todo-app/src/App.js",["32","33"],"import React, { Component, useState, useEffect } from 'react';\nimport Form from \"./Components/Form.jsx\";\nimport List from \"./Components/List.jsx\";\nimport useLocalStorage from \"./hooks/UseLocalStorage.jsx\"\nimport \"./App.css\";\n\n\nconst App = () => {\n\n    // Stanja sa useState\n    const [input, setInput] = useState(\"\");\n    // const [todos, setTodos] = useState([]);\n    const [todos, setTodos] = useLocalStorage(\"todos\", []);\n    const [filter, setFilter] = useState([\"all\"]);\n    const [filteredItems, setFilteredItems] = useState([todos]);\n\n    return (<div>\n        <h4 > Todo Aplikacija </h4>\n        <Form filteredItems={filteredItems}\n            setFilteredItems={setFilteredItems}\n            filter={filter}\n            setFilter={setFilter}\n            input={input}\n            setTodos={setTodos}\n            todos={todos}\n            setInput={setInput}\n        />\n        <List filteredItems={filteredItems}\n            setFilteredItems={setFilteredItems}\n            todos={todos}\n            setTodos={setTodos}\n        />\n    </div>\n    );\n}\n\nexport default App;","/home/lumar26/todo-app/src/Components/List.jsx",[],"/home/lumar26/todo-app/src/Components/Form.jsx",["34","35"],"import React, { Component, useEffect } from 'react';\n// instaliran dodatan paket za generisanje id-jeva, i preko f-je nextId() generisemo novi id\nimport nextId from \"react-id-generator\";\n\nconst Form = ({ filter, setFilter, setFilteredItems, input, todos, setTodos, setInput }) => {\n\n    useEffect(() => {\n        handleFilter();\n    }, [filter, todos])\n\n    const inputHandler = (e) => {\n        setInput(e.target.value);\n    }\n\n    const handleNewTodo = (e) => {\n        e.preventDefault();\n        setInput(input);\n        input !== \"\"\n            ? setTodos([...todos, { todoInfo: input, done: false, id: nextId(), importance: \"standard\" }])\n            : alert(\"Ne može se napraviti todo od praznog unosa\");\n        // sad praznimo polje za unos\n        setInput(\"\");\n    }\n\n    const handleFilter = (ev) => {\n        switch (filter) {\n            case \"done\":\n                setFilteredItems(todos.filter(el => el.done));\n                break;\n            case \"undone\":\n                setFilteredItems(todos.filter(el => !el.done));\n                break;\n            default:\n                setFilteredItems(todos);\n                break;\n        }\n    }\n\n    const handleChangeFilter = (ev) => {\n        setFilter(ev.target.value);\n    }\n    const enterPressed = (ev) => {\n        let code = ev.keyCode || ev.which;\n        if (code === 13) handleNewTodo();\n    }\n\n    return (\n        <form>\n            <div className=\"form-container\">\n                <div className=\"form-container1\">\n                    {/* dodavanjem value={input} mi obezbedjujemo da kad god se stanje inputa promeni\n            nakon ponovnog renderovanja value bude jednako inputu koji smo setovali na \"\" */}\n                    <input value={input} onChange={inputHandler} type=\"text\" className=\"todo-input\" placeholder=\"Unesite Vaš zadatak:\" />\n                    <button onKeyPress={enterPressed} onClick={handleNewTodo} className=\"todo-button\" type=\"submit\">\n                        {/* ovo menjamo kasnije */}\n                        <i className=\"fas fa-plus\"></i>\n                    </button>\n                </div>\n                <div className=\"form-container2\">\n                    <div className=\"select\">\n                        <select onChange={handleChangeFilter} name=\"todos\" className=\"filter-todo\">\n                            <option value=\"all\">Svi</option>\n                            <option value=\"done\">Završeni</option>\n                            <option value=\"undone\">Nezavršeni</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;","/home/lumar26/todo-app/src/hooks/UseLocalStorage.jsx",[],"/home/lumar26/todo-app/src/Components/Item.jsx",["36","37"],"// import React, { Component } from 'react';\nimport React, { useState, useEffect } from 'react';\n\nconst Item = ({ info, todo, todos, setTodos }) => {\n\n    const handleDelete = () => {\n        setTodos(todos.filter((elem) => elem.id !== todo.id))\n    }\n\n    const handleToggleStatus = () => {\n        // ovde treba da odradimo dodavanje i uklanjanje klase\n        // ta klasa treba da precrta odredjenu todo stavku\n        setTodos(todos.map(el => {\n            if (el.id === todo.id) {\n                return {\n                    // ovo je destrukturisanje objekta prvo, i onda menjamo jedan property\n                    ...el, done: !el.done\n                    // trebalo bi kad se promeni ovaj atribut na osnovu toga da povlaci odgovarajucu klasu iz css\n                }\n            }\n            return el;\n        }))\n    }\n\n    return (\n        <div className=\"item\">\n            <span className={`${todo.done ? \"done\" : \"\"}`}>{info}</span>\n            <div className=\"confirmed\">\n                <button onClick={handleToggleStatus} className=\"btn-check\"><i className=\"fas fa-check\"></i></button>\n                <button onClick={handleDelete} className=\"btn-delete\"><i className=\"fas fa-trash-alt\"></i></button>\n            </div>\n        </div>\n    );\n}\n\nexport default Item;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"46","line":1,"column":38,"nodeType":"44","messageId":"45","endLine":1,"endColumn":47},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":9,"column":8,"nodeType":"49","endLine":9,"endColumn":23,"suggestions":"50"},{"ruleId":"42","severity":1,"message":"51","line":2,"column":17,"nodeType":"44","messageId":"45","endLine":2,"endColumn":25},{"ruleId":"42","severity":1,"message":"46","line":2,"column":27,"nodeType":"44","messageId":"45","endLine":2,"endColumn":36},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.","ArrayExpression",["54"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [filter, handleFilter, todos]",{"range":"57","text":"58"},[336,351],"[filter, handleFilter, todos]"]