[{"/home/lumar26/todo-app/src/index.js":"1","/home/lumar26/todo-app/src/App.js":"2","/home/lumar26/todo-app/src/Components/Item.jsx":"3","/home/lumar26/todo-app/src/Components/Form.jsx":"4","/home/lumar26/todo-app/src/Components/List.jsx":"5"},{"size":203,"mtime":1611853148283,"results":"6","hashOfConfig":"7"},{"size":1567,"mtime":1612037554986,"results":"8","hashOfConfig":"7"},{"size":1291,"mtime":1612038620933,"results":"9","hashOfConfig":"7"},{"size":2317,"mtime":1612007486946,"results":"10","hashOfConfig":"7"},{"size":495,"mtime":1612006880094,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"g927rt",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/home/lumar26/todo-app/src/index.js",[],["25","26"],"/home/lumar26/todo-app/src/App.js",["27","28"],"/home/lumar26/todo-app/src/Components/Item.jsx",["29","30"],"/home/lumar26/todo-app/src/Components/Form.jsx",["31","32"],"import React, { Component, useEffect } from 'react';\n// instaliran dodatan paket za generisanje id-jeva, i preko f-je nextId() generisemo novi id\nimport nextId from \"react-id-generator\";\n\nconst Form = ({ filter, setFilter, setFilteredItems, input, todos, setTodos, setInput }) => {\n\n\n    useEffect(() => {\n        handleFilter();\n    }, [filter, todos])\n\n    const inputHandler = (e) => {\n        setInput(e.target.value);\n    }\n\n    const handleNewTodo = (e) => {\n        e.preventDefault();\n        setInput(input);\n        input !== \"\"\n            ? setTodos([...todos, { todoInfo: input, done: false, id: nextId(), importance: \"standard\" }])\n            : alert(\"Ne može se napraviti todo od praznog unosa\");\n        // sad praznimo polje za unos\n        setInput(\"\");\n    }\n\n    const handleFilter = (ev) => {\n        switch (filter) {\n            case \"done\":\n                setFilteredItems(todos.filter(el => el.done));\n                break;\n            case \"undone\":\n                setFilteredItems(todos.filter(el => !el.done));\n                break;\n            default:\n                setFilteredItems(todos);\n                break;\n        }\n    }\n\n    const handleChangeFilter = (ev) => {\n        setFilter(ev.target.value);\n    }\n    const enterPressed = (ev) => {\n        let code = ev.keyCode || ev.which;\n        if (code === 13) handleNewTodo();\n    }\n\n    return (\n        <form>\n            {/* dodavanjem value={input} mi obezbedjujemo da kad god se stanje inputa promeni\n            nakon ponovnog renderovanja value bude jednako inputu koji smo setovali na \"\" */}\n            <input value={input} onChange={inputHandler} type=\"text\" className=\"todo-input\" />\n            <button onKeyPress={enterPressed} onClick={handleNewTodo} className=\"todo-button\" type=\"submit\">\n                {/* ovo menjamo kasnije */}\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <div className=\"select\">\n                <select onChange={handleChangeFilter} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">Svi</option>\n                    <option value=\"done\">Završeni</option>\n                    <option value=\"undone\">Nezavršeni</option>\n                </select>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;","/home/lumar26/todo-app/src/Components/List.jsx",["33"],"import React, { Component } from 'react';\nimport Item from './Item.jsx'\n\nconst List = ({filteredItems, todos, setTodos}) => {\n    return (\n        <div class=\"todo-container\">\n            <ul class=\"todo-list\">\n                {filteredItems.map((todo) => <Item \n                todo={todo} \n                key={todo.id} \n                info={todo.todoInfo} \n                todos={todos} \n                setTodos={setTodos}/>)}\n            </ul>\n        </div>\n    );\n}\n\nexport default List;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"38","severity":1,"message":"42","line":1,"column":38,"nodeType":"40","messageId":"41","endLine":1,"endColumn":47},{"ruleId":"38","severity":1,"message":"43","line":2,"column":17,"nodeType":"40","messageId":"41","endLine":2,"endColumn":25},{"ruleId":"38","severity":1,"message":"42","line":2,"column":27,"nodeType":"40","messageId":"41","endLine":2,"endColumn":36},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"44","severity":1,"message":"45","line":10,"column":8,"nodeType":"46","endLine":10,"endColumn":23,"suggestions":"47"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [filter, handleFilter, todos]",{"range":"53","text":"54"},[337,352],"[filter, handleFilter, todos]"]